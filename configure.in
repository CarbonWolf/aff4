# basics
AC_INIT()

# Store the configuration in this header
AC_CONFIG_HEADER([include/config.h])
AC_CONFIG_AUX_DIR(config)
AM_INIT_AUTOMAKE(libaff4, 0.01)

# check standard stuff
AC_PROG_LIBTOOL
AC_PROG_CC

# check headers
AC_CHECK_HEADER(zlib.h,,AC_MSG_ERROR([You Must install zlib-dev to build libaff4]))

## We really need libuuid:
AC_CHECK_HEADER(uuid/uuid.h,,AC_MSG_ERROR([You Must install uuid-dev to build libaff4]))
AC_CHECK_LIB([uuid],[uuid_generate], , AC_MSG_ERROR([You Must install uuid-dev to build libaff4]))

## Are we running on windows?
AC_CHECK_HEADER(windows.h,have_windows=yes,have_windows=no)

## Allow users to disable optional libraries:
## Afflib needs some special libraries to link against - is that a bug in afflib?
ac_my_check_lib_save_LIBS=$LIBS
LIBS="-lz -lcrypto -lstdc++  $LIBS"

AC_ARG_ENABLE(afflib, 
        [  --disable-afflib        Do not use AFFLIB even if it is installed],
# Action if they gave this argument
        [ if test "x$enableval" = "xyes" ; then
            AC_CHECK_LIB([afflib], [af_open], have_libafflib=yes, have_libafflib=no)
          elif test "x$enableval" = "xno" ; then
	    have_libafflib=disabled
            echo "Ignoring AFFLIB."
          else
            echo "Error: Unknown enable-afflib argument."
            exit -1
          fi
        ],
# if they did not specify aff, look for it
        [AC_CHECK_LIB([afflib], [af_open], have_libafflib=yes, [
		have_libafflib=no
		AC_MSG_WARN([You must install libaff (http://www.afflib.org/) for AFF image support])
		])]
        )

## Now work out which version of AFFLIB it is:
libaff_version=unknown
if test $have_libafflib = yes; then
	AC_CHECK_HEADER(afflib.h, libaff_version=1,)

   	if test $libaff_version = unknown; then
  		AC_CHECK_HEADER(afflib/afflib.h, libaff_version=3,)
   	fi

	if test $libaff_version = unknown; then
    		AC_MSG_WARN([I cant seem to find afflib.h (do you need to install afflib-dev)])
        	have_libafflib=no
   	fi
fi

AC_SUBST(LIBAFFLIB_VERSION, $libaff_version)
LIBS=$ac_my_check_lib_save_LIBS

ac_my_check_lib_save_LIBS=$LIBS
LIBS="-lz  $LIBS"

AC_ARG_ENABLE(ewf, 
        [  --disable-ewf           Do not use libewf even if it is installed],
# Action if they gave this argument
        [ if test "x$enableval" = "xyes" ; then
            AC_CHECK_LIB([ewf], [libewf_open], have_libewf=yes, [
		have_libewf=no; 
		])
          elif test "x$enableval" = "xno" ; then
	    have_libewf=disabled
            echo "Ignoring LibEWF."
          else
            echo "Error: Unknown enable-ewf argument."
            exit -1
          fi
        ],
# if they did not specify ewf, look for it
        [
	  AC_CHECK_LIB([ewf], [libewf_open], have_libewf=yes, 
	  [
	    have_libewf=no
	    AC_MSG_WARN([You must install libewf (http://www.uitwisselplatform.nl/projects/libewf/) for Expert Witness Format (encase) support])
	  ])
       ])
LIBS=$ac_my_check_lib_save_LIBS

## We only can use a later version than 20080501 - we compile a small
## program to check the version string:
if test $have_libewf = yes; then
	  ## Save libs
	  ac_check_lib_save_LIBS=$LIBS
	  LIBS="-lewf -static  $LIBS"
	  AC_RUN_IFELSE(
	    [
	       AC_LANG_PROGRAM([[#include "libewf.h"]], 
	                       [[return(strcmp("20080501", libewf_get_version())>0);]])
	    ], have_libewf=yes ## If we succeeded we just do nothing
	    ,[
	       have_libewf=no
	       AC_MSG_WARN([You libewf version must be more recent then 20080501.])
	     ], have_libewf=yes ## Just compile it if cross compiling
	  )
	  ## Restore the libs
	  LIBS=$ac_check_lib_save_LIBS
fi

#curl support
AC_ARG_ENABLE(curl,
	[  --disable-curl          Do not use libcurl even if its installed ],
	[ if test "x$enableval" = "xyes"; then
              have_libcurl=yes
	  elif test "x$enableval" = "xno"; then
              have_libcurl=disabled
	  else
              exit -1
          fi
	],
	[ have_libcurl=yes ]
     )

if test "x$have_libcurl" = "xyes"; then
      AC_CHECK_HEADER(curl/curl.h, [
	AC_CHECK_LIB([curl], [curl_easy_setopt], [
			have_libcurl=yes
	], have_libcurl=no)
	], have_libcurl=no)

   AC_DEFINE(HAVE_LIBCURL, 1, [ Do we support curl ])
fi


################################################################
################################################################
## Crypto (must follow S3)
###
AC_CHECK_LIB([ssl],[ssl3_new], have_openssl=yes, 
	AC_MSG_ERROR( [ You must have openssl header libraries. This is often packaged as libssl-dev ]))

AC_CHECK_HEADERS([openssl/aes.h openssl/bio.h openssl/evp.h openssl/hmac.h openssl/md5.h openssl/rand.h openssl/rsa.h openssl/sha.h openssl/pem.h])

AC_CHECK_FUNCS([MD5 SHA1 AES_encrypt RAND_pseudo_bytes des_read_pw_string EVP_read_pw_string])
AC_CHECK_LIB([md],[MD5])                # if libmd is available, get it

### SHA256 insanity. 
### Some sha.h include files have sha256 defined and some do not
### Some systems put it in a different location.
### the whole thing is really disturbing
AC_CHECK_HEADERS([sha256.h])            # on some system
AC_CHECK_HEADERS([openssl/fips_sha.h])  # on other systems
AC_CHECK_FUNCS([SHA256_Init])           # try to figure out what it's called
AC_CHECK_FUNCS([EVP_sha256],[evp_sha256=yes],[evp_sha256="no "])
AC_CHECK_FUNCS([PEM_read_bio_RSA_PUBKEY])


## Check for tsk
AC_CHECK_LIB([tsk3], [tsk_fs_fls], have_sleuthkit=yes, have_sleuthkit=no)
AC_CHECK_HEADERS([tsk3/libtsk.h])

## Check for fuse
## FUSE: Filesystem in Userspace
AC_ARG_ENABLE(fuse,
        AC_HELP_STRING([--enable-fuse=yes],
               [Support for FUSE, Filesystem in Userspace. (default yes)]),
        [enable_fuse=$enableval], [enable_fuse=yes])
if test "x${enable_fuse}" = "xyes" ; then
  AC_MSG_NOTICE([FUSE requested])
  CPPFLAGS="-D_FILE_OFFSET_BITS=64 $CPPFLAGS"
  AC_CHECK_HEADER([fuse.h],,
    AC_MSG_NOTICE([fuse.h not found; Disabling FUSE support.])
    enable_fuse=no)
  AC_SUBST(FUSE_LIBS)
  AC_SUBST(FUSE_CFLAGS)
fi
AFFUSE_BIN=
if test "${enable_fuse}" = "yes"; then
  AC_DEFINE([HAVE_FUSE],1,[Use FUSE to mount AFF images])
  AFFUSE_BIN='affuse$(EXEEXT)'
  FUSE_LIBS=-lfuse
fi

AC_SUBST(AFFUSE_BIN)
AM_PROG_CC_C_O                  dnl for affuse


## Conditionals for automake
AM_CONDITIONAL(HAVE_LIBAFFLIB, test "$have_libafflib" = yes)
AM_CONDITIONAL(HAVE_LIBEWF, test "$have_libewf" = yes)
AM_CONDITIONAL(HAVE_WINDOWS, test "$have_windows" = yes)
AM_CONDITIONAL(HAVE_LIBCURL, test "$have_libcurl" = yes)
AM_CONDITIONAL(HAVE_OPENSSL, test "$have_openssl" = yes)
AM_CONDITIONAL(HAVE_TSK, test "$have_sleuthkit" = yes)
AM_CONDITIONAL(HAVE_LIBFUSE, test "$enable_fuse" = yes)

# defines and output
AC_DEFINE([__DEBUG__], [], [Debuging enabled])

# endianess support
AC_C_BIGENDIAN()

# Large file support
AC_SYS_LARGEFILE

AC_OUTPUT([ 
	Makefile 
	lib/Makefile
	tools/Makefile
	])

## Tell the use what we found:
AC_MSG_NOTICE([])
AC_MSG_NOTICE([*****************************************])
AC_MSG_NOTICE([${PACKAGE} ${VERSION} configuration])
AC_MSG_NOTICE([EWF Support:             $have_libewf ])
AC_MSG_NOTICE([AFF Support:             $have_libafflib ])
AC_MSG_NOTICE([CURL Support:            $have_libcurl ])
AC_MSG_NOTICE([FUSE:                    $enable_fuse])
AC_MSG_NOTICE([*****************************************])
AC_MSG_NOTICE([])
