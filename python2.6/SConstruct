import os, os.path, pdb
import SconsUtils.utils as utils

Import('env')

nenv = env.Clone()

BOUND_FILES = Split("""
              #include/aff4_constants.h
              #include/aff4_utils.h
              #include/aff4_rdf.h
              #include/aff4_io.h
              #include/aff4_resolver.h
              #include/aff4_rdf_serialise.h
              #include/aff4_objects.h
              #include/aff4_crypto.h
""")

if utils.HEADERS.get("HAVE_LIBEWF_H"):
    BOUND_FILES.append("#include/ewfvolume.h")

import class_parser

def build_python_bindings(target, source, env):
    """ A command to generate python bindings """
    module_name = os.path.splitext(os.path.basename(target[0].name))[0]
    utils.warn("Generating automatic python bindings for module %s" % module_name)

    p = class_parser.HeaderParser(module_name, verbose=env['V'])
    p.parse_filenames([s.get_abspath() for s in source])

    fd = open(target[0].get_abspath(), 'w')
    p.write(fd)
    fd.close()

nenv.Append(CFLAGS = " -include lib/config.h -Ilibraptor ")

if not nenv.get("disable_curl"):
    BOUND_FILES.append("#include/aff4_http.h")

nenv.Command('pyaff4.c', BOUND_FILES, build_python_bindings)
nenv.Depends('pyaff4.c', 'class_parser.py')

nenv.PythonModule("pyaff4", ["pyaff4.c"],LIBS=env.libaff4_so)

BOUND_FILES = Split("""
/usr/local/include/tsk3/libtsk.h
/usr/local/include/tsk3/fs/tsk_fs.h
/usr/local/include/tsk3/base/tsk_base.h
tsk/pytsk3.h
tsk/tsk3.h
""")

nenv.Command('tsk/pytsk3.c', BOUND_FILES, build_python_bindings)
nenv.Depends('tsk/pytsk3.c', 'class_parser.py')

nenv.PythonModule("pytsk3", ['tsk/pytsk3.c', 'tsk/tsk3.c'], LIBS=[env.libaff4_so, 'tsk3'])
